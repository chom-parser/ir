pub enum Constant { Int (:: source_span :: Loc < crate :: glue :: Int >) , Char (:: source_span :: Loc < crate :: glue :: Char >) , Range (:: source_span :: Loc < crate :: glue :: Char > , :: source_span :: Loc < crate :: glue :: Char >) , String (:: source_span :: Loc < crate :: glue :: String >) } pub struct Expr (pub :: source_span :: Loc < crate :: ast :: Constant >) ; impl std :: fmt :: Debug for Constant { fn fmt (& self , f : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { match self { crate :: ast :: Constant :: Int (arg0) => { write ! (f , "constant.int({:?})" , arg0) } crate :: ast :: Constant :: Char (arg0) => { write ! (f , "constant.char({:?})" , arg0) } crate :: ast :: Constant :: Range (arg0 , arg1) => { write ! (f , "constant.range({:?}, {:?})" , arg0 , arg1) } crate :: ast :: Constant :: String (arg0) => { write ! (f , "constant.string({:?})" , arg0) } } } } impl std :: fmt :: Debug for Expr { fn fmt (& self , f : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { write ! (f , "expr({:?})" , self . 0) } }